services:
  reverse-proxy:
    image: traefik:v3.5.4
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=true"
      - "--providers.docker.network=co2-calculator-network"
      - "--entryPoints.web.address=:80"
      - "--api.insecure=true"
      - "--api.dashboard=true"
      - "--providers.docker"
      - "--log.level=DEBUG"
      - "--ping=true"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.dashboard.service=api@internal"
    container_name: co2-calculator-traefik
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "80:80"
      - "8080:8080"
    expose:
      - "80"
      - "8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - co2-calculator-network
  # PostgreSQL for Auth module
  postgres:
    image: postgres:15-alpine
    container_name: co2-calculator-postgres
    env_file:
      - ./backend/.env
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U $$DB_USER -d $$DB_NAME -h $$DB_HOST -p $$DB_PORT",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - co2-calculator-network

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: co2-calculator-pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - co2-calculator-network

  # # Open Policy Agent
  # opa:
  #   image: openpolicyagent/opa:latest
  #   container_name: co2-opa
  #   command:
  #     - "run"
  #     - "--server"
  #     - "--addr=0.0.0.0:8181"
  #     - "--log-level=debug"
  #     - "/policies"
  #   ports:
  #     - "8181:8181"
  #   volumes:
  #     - ./app/policies:/policies:ro
  #   healthcheck:
  #     test: ["CMD", "wget", "-q", "--spider", "http://localhost:8181/health"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: co2-backend
    networks:
      - co2-calculator-network
    command: >
      sh -c "
        alembic upgrade head &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000
      "
    env_file:
      - ./backend/.env
    environment:
      # OVERRIDE to use service name 'postgres' as host in Docker Compose
      DB_HOST: postgres
      DEBUG: "False"
    ports:
      - "8000:8000"
    # volumes:
    #   - ./app:/app/app:ro
    labels:
      # match localhost/api/*
      - "traefik.http.routers.backend.priority=200"
      - "traefik.http.routers.backend.rule=PathPrefix(`/api`)"
      - "traefik.http.routers.backend.entrypoints=web"
      # remove /api before sending to backend
      - "traefik.http.middlewares.backend-stripprefix.stripprefix.prefixes=/api"
      - "traefik.http.routers.backend.middlewares=backend-stripprefix,compress"
      - "traefik.http.middlewares.compress.compress=true"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"
    depends_on:
      postgres:
        condition: service_healthy
      # opa:
      #   condition: service_healthy

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: co2-frontend
    networks:
      - co2-calculator-network
    ports:
      - "3000:80"
    volumes:
      - ./frontend:/app:ro
    labels:
      # match everything else
      - "traefik.http.routers.frontend.rule=PathPrefix(`/`)"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.routers.frontend.priority=100"
      - "traefik.http.routers.frontend.middlewares=compress"
      - "traefik.http.middlewares.compress.compress=true"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
    depends_on:
      - backend

networks:
  co2-calculator-network:
    driver: bridge

volumes:
  postgres-data:
